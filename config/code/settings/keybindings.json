[
  // Mult-line editing
  { "key": "{{command_key}}+shift+l", "command": "editor.action.insertCursorAtEndOfEachLineSelected", "when": "editorTextFocus" },

  // Code navigation
  { "key": "ctrl+]", "command": "editor.action.revealDefinition", "when": "editorHasDefinitionProvider && editorTextFocus" },
  { "key": "ctrl+shift+]", "command": "editor.action.goToImplementation", "when": "editorHasImplementationProvider && editorTextFocus" },
  { "key": "ctrl+shift+alt+]", "command": "references-view.findImplementations", "when": "editorHasImplementationProvider && editorTextFocus" },
  { "key": "ctrl+[", "command": "editor.action.goToReferences", "when": "editorHasReferenceProvider && editorTextFocus" },
  { "key": "ctrl+alt+[", "command": "references-view.findReferences", "when": "editorHasReferenceProvider && editorTextFocus" },

  // Maximizing
  { "key": "ctrl+shift+enter", "command": "workbench.action.toggleEditorWidths", "when": "editorFocus" },
  { "key": "ctrl+shift+enter", "command": "workbench.action.toggleMaximizedPanel", "when": "panelFocus" },

  // Terminal (tab/pane control)
  { "key": "ctrl+shift+n", "command": "workbench.action.terminal.newInActiveWorkspace", "when": "terminalFocus" },
  { "key": "ctrl+shift+w", "command": "workbench.action.terminal.kill", "when": "terminalFocus" },
  { "key": "ctrl+shift+\\", "command": "workbench.action.terminal.split", "when": "terminalFocus" },
  { "key": "ctrl+shift+left", "command": "workbench.action.terminal.focusPrevious", "when": "terminalFocus" },
  { "key": "ctrl+shift+right", "command": "workbench.action.terminal.focusNext", "when": "terminalFocus" },
  { "key": "ctrl+shift+[", "command": "workbench.action.terminal.focusPreviousPane", "when": "terminalFocus" },
  { "key": "ctrl+shift+]", "command": "workbench.action.terminal.focusNextPane", "when": "terminalFocus" },

  // Terminal (cursor control)
  { "key": "cmd+up", "command": "workbench.action.terminal.sendSequence", "args": { "text": "\u001b[1;5H" }, "when": "terminalFocus" },
  { "key": "cmd+down", "command": "workbench.action.terminal.sendSequence", "args": { "text": "\u001b[1;5F" }, "when": "terminalFocus" },
  { "key": "alt+backspace", "command": "workbench.action.terminal.sendSequence", "args": { "text": "\u001b\u007f" }, "when": "terminalFocus" },

  // Terminal (printing file info)
  { "key": "ctrl+shift+p", "command": "workbench.action.terminal.sendSequence", "args": { "text": "'${relativeFile}'" }, "when": "!isWindows && terminalFocus" },
  { "key": "ctrl+shift+p", "command": "workbench.action.terminal.sendSequence", "args": { "text": "(wslpath '${relativeFile}')" }, "when": "isWindows && terminalFocus" },
  { "key": "ctrl+shift+l", "command": "workbench.action.terminal.sendSequence", "args": { "text": "${lineNumber},+1" }, "when": "terminalFocus" },

  // Clearing
  { "key": "{{command_key}}+k", "command": "workbench.action.terminal.clear", "when": "terminalFocus" },
  { "key": "ctrl+l", "command": "workbench.debug.panel.action.clearReplAction", "when": "focusedView == 'workbench.panel.repl.view'" },
  { "key": "ctrl+l", "command": "workbench.output.action.clearOutput", "when": "focusedView == 'workbench.panel.output'" },

  // Jumping within a file (later keybindings supersede earlier ones)
  { "key": "shift+ctrl+down", "command": "workbench.action.editor.nextChange", "when": "editorTextFocus" },
  { "key": "shift+ctrl+up", "command": "workbench.action.editor.previousChange", "when": "editorTextFocus" },
  { "key": "shift+ctrl+down", "command": "merge-conflict.previous", "when": "editorTextFocus && mergeConflictsCount > 0" },
  { "key": "shift+ctrl+up", "command": "merge-conflict.next", "when": "editorTextFocus && mergeConflictsCount > 0" },
  { "key": "shift+ctrl+down", "command": "workbench.action.compareEditor.nextChange", "when": "editorTextFocus && isInDiffEditor" },
  { "key": "shift+ctrl+up", "command": "workbench.action.compareEditor.previousChange", "when": "editorTextFocus && isInDiffEditor" },
  { "key": "shift+ctrl+down", "command": "search.action.focusNextSearchResult", "when": "inSearchEditor" },
  { "key": "shift+ctrl+up", "command": "search.action.focusPreviousSearchResult", "when": "inSearchEditor" },
  { "key": "shift+ctrl+down", "command": "editor.action.nextMatchFindAction", "when": "findWidgetVisible" },
  { "key": "shift+ctrl+up", "command": "editor.action.previousMatchFindAction", "when": "findWidgetVisible" },

  // Git
  { "key": "shift+ctrl+c", "command": "git.openChange", "when": "editorTextFocus" },
  { "key": "cmd+k cmd+r", "command": "git.revertSelectedRanges", "when": "editorTextFocus && !operationInProgress" },
  { "key": "cmd+k cmd+s", "command": "git.stageSelectedRanges", "when": "editorTextFocus && !operationInProgress" },
  { "key": "cmd+k cmd+u", "command": "git.unstageSelectedRanges", "when": "isInDiffEditor && !operationInProgress" },

  // Elixir
  { "key": "alt+p", "command": "extension.toPipe", "when": "editorTextFocus && resourceLangId == 'elixir'" },
  { "key": "alt+shift+p", "command": "extension.fromPipe", "when": "editorTextFocus && resourceLangId == 'elixir'" },

  // Bookmarks
  { "key": "alt+cmd+b a", "command": "bookmarks.toggleLabeled", "when": "editorTextFocus" },
  { "key": "alt+cmd+b t", "command": "bookmarks.toggle", "when": "editorTextFocus" },
  { "key": "alt+cmd+b l", "command": "bookmarks.listFromAllFiles" },
  { "key": "alt+cmd+b c", "command": "bookmarks.clearFromAllFiles" },

  // Open projects with project manager in new windows
  { "key": "{{command_key}}+alt+p", "command": "projectManager.listProjectsNewWindow" },

  // Redefine macOS keybindings for Windows
  { "key": "ctrl+-", "command": "-workbench.action.zoomOut" },
  { "key": "ctrl+-", "command": "workbench.action.navigateBack", "when": "canNavigateBack" },
  { "key": "ctrl+shift+-", "command": "-workbench.action.zoomOut" },
  { "key": "ctrl+shift+-", "command": "workbench.action.navigateForward", "when": "canNavigateForward" },
  { "key": "ctrl+alt+t", "command": "workbench.action.closeOtherEditors" }
]
